// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DAOLayer.Net7.User;

public partial class UserContext : DbContext
{
    public UserContext(DbContextOptions<UserContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Address { get; set; }

    public virtual DbSet<Apn> Apn { get; set; }

    public virtual DbSet<ApnErrorLog> ApnErrorLog { get; set; }

    public virtual DbSet<ApnLogs> ApnLogs { get; set; }

    public virtual DbSet<ApnSchedule> ApnSchedule { get; set; }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<Gender> Gender { get; set; }

    public virtual DbSet<QtoolConnect> QtoolConnect { get; set; }

    public virtual DbSet<UGenericQuestions> UGenericQuestions { get; set; }

    public virtual DbSet<UInternalNotes> UInternalNotes { get; set; }

    public virtual DbSet<User> User { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Address>(entity =>
        {
            entity.Property(e => e.AddressCity)
                .HasMaxLength(127)
                .HasColumnName("address_city");
            entity.Property(e => e.AddressCountry)
                .HasMaxLength(127)
                .HasColumnName("address_country");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(255)
                .HasColumnName("address_line_1");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(255)
                .HasColumnName("address_line_2");
            entity.Property(e => e.AddressPostalCode)
                .HasMaxLength(50)
                .HasColumnName("address_postal_code");
            entity.Property(e => e.AddressState)
                .HasMaxLength(127)
                .HasColumnName("address_state");
            entity.Property(e => e.CommonAddressShippingComments)
                .HasMaxLength(1024)
                .HasColumnName("common_address_shipping_comments");
        });

        modelBuilder.Entity<Apn>(entity =>
        {
            entity.Property(e => e.DeviceId)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.FkUserId).HasColumnName("fk_userId");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("is_active");
            entity.Property(e => e.LastActive)
                .HasColumnType("datetime")
                .HasColumnName("last_active");
            entity.Property(e => e.Platform)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");

            entity.HasOne(d => d.FkUser).WithMany(p => p.Apn)
                .HasForeignKey(d => d.FkUserId)
                .HasConstraintName("FK_Apn_User");
        });

        modelBuilder.Entity<ApnErrorLog>(entity =>
        {
            entity.Property(e => e.FkUsrId).HasColumnName("fk_usrId");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasColumnName("message");
            entity.Property(e => e.Stack).HasColumnName("stack");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<ApnLogs>(entity =>
        {
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("category");
            entity.Property(e => e.Devicekey)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("devicekey");
            entity.Property(e => e.FkUserId).HasColumnName("fk_userId");
            entity.Property(e => e.Platform)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("platform");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("title");
        });

        modelBuilder.Entity<ApnSchedule>(entity =>
        {
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CreatedUtc)
                .HasColumnType("datetime")
                .HasColumnName("CreatedUTC");
            entity.Property(e => e.DateToTriggerUtc)
                .HasColumnType("datetime")
                .HasColumnName("DateToTriggerUTC");
            entity.Property(e => e.DeviceId)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.HasSent).HasColumnName("hasSent");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(2048)
                .IsUnicode(false)
                .HasColumnName("message");
            entity.Property(e => e.Platform)
                .IsRequired()
                .HasMaxLength(1)
                .IsFixedLength();
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.ToTable("country");

            entity.Property(e => e.AreaCode).HasColumnName("area_code");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.TimeOffset).HasColumnName("time_offset");
        });

        modelBuilder.Entity<Gender>(entity =>
        {
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("is_Active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("name");
        });

        modelBuilder.Entity<QtoolConnect>(entity =>
        {
            entity.Property(e => e.Complete).HasColumnName("complete");
            entity.Property(e => e.ExpiresUtc)
                .HasColumnType("datetime")
                .HasColumnName("expires_utc");
            entity.Property(e => e.FkUserId).HasColumnName("fk_user_id");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(1024);
        });

        modelBuilder.Entity<UGenericQuestions>(entity =>
        {
            entity.ToTable("u_generic_questions");

            entity.Property(e => e.FkUserId).HasColumnName("fk_user_id");
            entity.Property(e => e.QuestionAnswer)
                .HasMaxLength(2048)
                .HasColumnName("question_answer");
            entity.Property(e => e.QuestionName)
                .IsRequired()
                .HasMaxLength(128)
                .HasColumnName("question_name");
            entity.Property(e => e.QuestionText)
                .HasMaxLength(512)
                .HasColumnName("question_text");

            entity.HasOne(d => d.FkUser).WithMany(p => p.UGenericQuestions)
                .HasForeignKey(d => d.FkUserId)
                .HasConstraintName("FK_u_generic_questions_User");
        });

        modelBuilder.Entity<UInternalNotes>(entity =>
        {
            entity.ToTable("u_internal_notes");

            entity.Property(e => e.ByUser).HasColumnName("by_user");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ForUser).HasColumnName("for_user");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasMaxLength(512)
                .HasColumnName("note");

            entity.HasOne(d => d.ByUserNavigation).WithMany(p => p.UInternalNotes)
                .HasForeignKey(d => d.ByUser)
                .HasConstraintName("FK_u_internal_notes_User");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.ApiKey).HasColumnName("api_key");
            entity.Property(e => e.BarcodeString)
                .HasMaxLength(50)
                .HasColumnName("barcode_string");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.Dob)
                .HasColumnType("date")
                .HasColumnName("dob");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .HasColumnName("first_name");
            entity.Property(e => e.FkFederatedUser)
                .IsRequired()
                .HasMaxLength(450)
                .HasColumnName("fk_federated_user");
            entity.Property(e => e.FkGender).HasColumnName("fk_gender");
            entity.Property(e => e.FkInternalNotesId).HasColumnName("fk_internal_notes_id");
            entity.Property(e => e.FkShippingAddress).HasColumnName("fk_shipping_address");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("gender");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("((1))")
                .HasColumnName("is_Active");
            entity.Property(e => e.IsNewBarcode).HasColumnName("is_new_barcode");
            entity.Property(e => e.LastKnownTimeOffset).HasColumnName("last_known_time_offset");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .HasColumnName("last_name");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .HasColumnName("middle_name");
            entity.Property(e => e.Mobile)
                .HasMaxLength(50)
                .HasColumnName("mobile");
            entity.Property(e => e.MobileCountryCode)
                .HasMaxLength(10)
                .HasColumnName("mobile_country_code");
            entity.Property(e => e.MuhdoEmail)
                .HasMaxLength(50)
                .HasColumnName("muhdo_email");
            entity.Property(e => e.SetTimeOffset).HasColumnName("set_time_offset");
            entity.Property(e => e.Signupstatus).HasColumnName("signupstatus");
            entity.Property(e => e.UserLevel).HasColumnName("user_level");
            entity.Property(e => e.Weight).HasColumnName("weight");

            entity.HasOne(d => d.FkGenderNavigation).WithMany(p => p.User)
                .HasForeignKey(d => d.FkGender)
                .HasConstraintName("FK_User_Gender");

            entity.HasOne(d => d.FkShippingAddressNavigation).WithMany(p => p.User)
                .HasForeignKey(d => d.FkShippingAddress)
                .HasConstraintName("FK_User_Address");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}