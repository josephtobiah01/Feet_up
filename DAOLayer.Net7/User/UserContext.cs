// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DAOLayer.Net7.User;

public partial class UserContext : DbContext
{
    public UserContext()
    {
    }

    public UserContext(DbContextOptions<UserContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Apn> Apn { get; set; }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<UInternalNotes> UInternalNotes { get; set; }

    public virtual DbSet<User> User { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Apn>(entity =>
        {
            entity.Property(e => e.DeviceId)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.FkUserId).HasColumnName("fk_userId");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("is_active");

            entity.HasOne(d => d.FkUser).WithMany(p => p.Apn)
                .HasForeignKey(d => d.FkUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Apn_User");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.ToTable("country");

            entity.Property(e => e.AreaCode).HasColumnName("area_code");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.TimeOffset).HasColumnName("time_offset");
        });

        modelBuilder.Entity<UInternalNotes>(entity =>
        {
            entity.ToTable("u_internal_notes");

            entity.Property(e => e.ByUser).HasColumnName("by_user");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ForUser).HasColumnName("for_user");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasMaxLength(512)
                .HasColumnName("note");

            entity.HasOne(d => d.ByUserNavigation).WithMany(p => p.UInternalNotesByUserNavigation)
                .HasForeignKey(d => d.ByUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_u_internal_notes_User");

            entity.HasOne(d => d.ForUserNavigation).WithMany(p => p.UInternalNotesForUserNavigation)
                .HasForeignKey(d => d.ForUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_u_internal_notes_User1");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.ApiKey).HasColumnName("api_key");
            entity.Property(e => e.BarcodeString)
                .HasMaxLength(50)
                .HasColumnName("barcode_string");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.Dob)
                .HasColumnType("date")
                .HasColumnName("dob");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .HasColumnName("first_name");
            entity.Property(e => e.FkFederatedUser)
                .IsRequired()
                .HasMaxLength(450)
                .HasColumnName("fk_federated_user");
            entity.Property(e => e.FkInternalNotesId).HasColumnName("fk_internal_notes_id");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("gender");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("((1))")
                .HasColumnName("is_Active");
            entity.Property(e => e.IsNewBarcode).HasColumnName("is_new_barcode");
            entity.Property(e => e.LastKnownTimeOffset).HasColumnName("last_known_time_offset");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .HasColumnName("last_name");
            entity.Property(e => e.Mobile)
                .HasMaxLength(50)
                .HasColumnName("mobile");
            entity.Property(e => e.SetTimeOffset).HasColumnName("set_time_offset");
            entity.Property(e => e.UserLevel).HasColumnName("user_level");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}