// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DAOLayer.Net7.Exercise;

public partial class ExerciseContext : DbContext
{
    public ExerciseContext()
    {
    }

    public ExerciseContext(DbContextOptions<ExerciseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<Eds12weekPlan> Eds12weekPlan { get; set; }

    public virtual DbSet<EdsAvaiableSetMetrics> EdsAvaiableSetMetrics { get; set; }

    public virtual DbSet<EdsDailyPlan> EdsDailyPlan { get; set; }

    public virtual DbSet<EdsEquipment> EdsEquipment { get; set; }

    public virtual DbSet<EdsExercise> EdsExercise { get; set; }

    public virtual DbSet<EdsExerciseClass> EdsExerciseClass { get; set; }

    public virtual DbSet<EdsExerciseType> EdsExerciseType { get; set; }

    public virtual DbSet<EdsForce> EdsForce { get; set; }

    public virtual DbSet<EdsLevel> EdsLevel { get; set; }

    public virtual DbSet<EdsMainMuscleWorked> EdsMainMuscleWorked { get; set; }

    public virtual DbSet<EdsMechanicsType> EdsMechanicsType { get; set; }

    public virtual DbSet<EdsOtherMuscleWorked> EdsOtherMuscleWorked { get; set; }

    public virtual DbSet<EdsReasonForReschedule> EdsReasonForReschedule { get; set; }

    public virtual DbSet<EdsReasonForSkipping> EdsReasonForSkipping { get; set; }

    public virtual DbSet<EdsSet> EdsSet { get; set; }

    public virtual DbSet<EdsSetDefaults> EdsSetDefaults { get; set; }

    public virtual DbSet<EdsSetMetricTypes> EdsSetMetricTypes { get; set; }

    public virtual DbSet<EdsSetMetrics> EdsSetMetrics { get; set; }

    public virtual DbSet<EdsSetMetricsDefault> EdsSetMetricsDefault { get; set; }

    public virtual DbSet<EdsSport> EdsSport { get; set; }

    public virtual DbSet<EdsTrainingSession> EdsTrainingSession { get; set; }

    public virtual DbSet<EdsWeeklyPlan> EdsWeeklyPlan { get; set; }

    public virtual DbSet<User> User { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Country>(entity =>
        {
            entity.ToTable("country");

            entity.Property(e => e.AreaCode).HasColumnName("area_code");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.TimeOffset).HasColumnName("time_offset");
        });

        modelBuilder.Entity<Eds12weekPlan>(entity =>
        {
            entity.ToTable("eds_12week_plan");

            entity.Property(e => e.DurationWeeks).HasColumnName("duration_weeks");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.FkCustomerId).HasColumnName("fk_customer_id");
            entity.Property(e => e.IsCurrent).HasColumnName("is_current");
            entity.Property(e => e.IsTemplate).HasColumnName("is_template");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");

            entity.HasOne(d => d.FkCustomer).WithMany(p => p.Eds12weekPlan)
                .HasForeignKey(d => d.FkCustomerId)
                .HasConstraintName("FK_eds_12week_plan_User");
        });

        modelBuilder.Entity<EdsAvaiableSetMetrics>(entity =>
        {
            entity.ToTable("eds_avaiable_set_metrics");

            entity.HasIndex(e => e.FkExerciseTypeId, "IX_eds_avaiable_set_metrics_fk_exercise_type_id");

            entity.HasIndex(e => e.FkSetMetricsTypesId, "IX_eds_avaiable_set_metrics_fk_set_metrics_types_id");

            entity.Property(e => e.FkExerciseTypeId).HasColumnName("fk_exercise_type_id");
            entity.Property(e => e.FkSetMetricsTypesId).HasColumnName("fk_set_metrics_types_id");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");

            entity.HasOne(d => d.FkExerciseType).WithMany(p => p.EdsAvaiableSetMetrics)
                .HasForeignKey(d => d.FkExerciseTypeId)
                .HasConstraintName("FK_eds_avaiable_set_metrics_eds_exercise_type");

            entity.HasOne(d => d.FkSetMetricsTypes).WithMany(p => p.EdsAvaiableSetMetrics)
                .HasForeignKey(d => d.FkSetMetricsTypesId)
                .HasConstraintName("FK_eds_avaiable_set_metrics_eds_set_metric_types");
        });

        modelBuilder.Entity<EdsDailyPlan>(entity =>
        {
            entity.ToTable("eds_daily_plan");

            entity.HasIndex(e => e.FkEdsWeeklyPlanId, "IX_eds_daily_plan_fk_eds_weekly_plan_id");

            entity.Property(e => e.EndDay)
                .HasColumnType("datetime")
                .HasColumnName("end_day");
            entity.Property(e => e.FkEdsWeeklyPlanId).HasColumnName("fk_eds_weekly_plan_id");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.IsTemplate).HasColumnName("is_template");
            entity.Property(e => e.StartDay)
                .HasColumnType("datetime")
                .HasColumnName("start_day");

            entity.HasOne(d => d.FkEdsWeeklyPlan).WithMany(p => p.EdsDailyPlan)
                .HasForeignKey(d => d.FkEdsWeeklyPlanId)
                .HasConstraintName("FK_eds_daily_plan_eds_weekly_plan");
        });

        modelBuilder.Entity<EdsEquipment>(entity =>
        {
            entity.ToTable("eds_equipment");

            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsExercise>(entity =>
        {
            entity.ToTable("eds_exercise");

            entity.HasIndex(e => e.FkTrainingId, "IX_eds_exercise_fk_training_id");

            entity.Property(e => e.EndTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("end_time_stamp");
            entity.Property(e => e.FkExerciseTypeId).HasColumnName("fk_exercise_type_id");
            entity.Property(e => e.FkTrainingId).HasColumnName("fk_training_id");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.IsCustomerAddedExercise).HasColumnName("is_customer_added_Exercise");
            entity.Property(e => e.IsSkipped).HasColumnName("is_skipped");
            entity.Property(e => e.TimeOffset).HasColumnName("time_offset");

            entity.HasOne(d => d.FkExerciseType).WithMany(p => p.EdsExercise)
                .HasForeignKey(d => d.FkExerciseTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_eds_exercise_eds_exercise_type");

            entity.HasOne(d => d.FkTraining).WithMany(p => p.EdsExercise)
                .HasForeignKey(d => d.FkTrainingId)
                .HasConstraintName("FK_eds_exercise_eds_training_session");
        });

        modelBuilder.Entity<EdsExerciseClass>(entity =>
        {
            entity.ToTable("eds_exercise_class");

            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsExerciseType>(entity =>
        {
            entity.ToTable("eds_exercise_type");

            entity.Property(e => e.ExplainerTextFr).HasColumnName("explainer_text_fr");
            entity.Property(e => e.ExplainerVideoFr).HasColumnName("explainer_video_fr");
            entity.Property(e => e.FkEquipmentId).HasColumnName("fk_equipment_id");
            entity.Property(e => e.FkExerciseClassId).HasColumnName("fk_exercise_class_id");
            entity.Property(e => e.FkForceId).HasColumnName("fk_force_id");
            entity.Property(e => e.FkLevelId).HasColumnName("fk_level_id");
            entity.Property(e => e.FkMainMuscleWorkedId).HasColumnName("fk_main_muscle_worked_id");
            entity.Property(e => e.FkMechanicsTypeId).HasColumnName("fk_mechanics_type_id");
            entity.Property(e => e.FkOtherMuscleWorkedId).HasColumnName("fk_other_muscle_worked_id");
            entity.Property(e => e.FkSportId).HasColumnName("fk_sport_id");
            entity.Property(e => e.HasSetDefaultTemplate).HasColumnName("has_set_default_template");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.IsSetCollapsed).HasColumnName("is_set_collapsed");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");

            entity.HasOne(d => d.FkEquipment).WithMany(p => p.EdsExerciseType)
                .HasForeignKey(d => d.FkEquipmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_eds_exercise_type_eds_equipment");

            entity.HasOne(d => d.FkExerciseClass).WithMany(p => p.EdsExerciseType)
                .HasForeignKey(d => d.FkExerciseClassId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_eds_exercise_type_eds_exercise_class");

            entity.HasOne(d => d.FkForce).WithMany(p => p.EdsExerciseType)
                .HasForeignKey(d => d.FkForceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_eds_exercise_type_eds_force");

            entity.HasOne(d => d.FkLevel).WithMany(p => p.EdsExerciseType)
                .HasForeignKey(d => d.FkLevelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_eds_exercise_type_eds_level");

            entity.HasOne(d => d.FkMainMuscleWorked).WithMany(p => p.EdsExerciseType)
                .HasForeignKey(d => d.FkMainMuscleWorkedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_eds_exercise_type_eds_main_muscle_worked");

            entity.HasOne(d => d.FkMechanicsType).WithMany(p => p.EdsExerciseType)
                .HasForeignKey(d => d.FkMechanicsTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_eds_exercise_type_eds_mechanics_type");

            entity.HasOne(d => d.FkOtherMuscleWorked).WithMany(p => p.EdsExerciseType)
                .HasForeignKey(d => d.FkOtherMuscleWorkedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_eds_exercise_type_eds_other_muscle_worked");

            entity.HasOne(d => d.FkSport).WithMany(p => p.EdsExerciseType)
                .HasForeignKey(d => d.FkSportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_eds_exercise_type_eds_sport");
        });

        modelBuilder.Entity<EdsForce>(entity =>
        {
            entity.ToTable("eds_force");

            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsLevel>(entity =>
        {
            entity.ToTable("eds_level");

            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsMainMuscleWorked>(entity =>
        {
            entity.ToTable("eds_main_muscle_worked");

            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsMechanicsType>(entity =>
        {
            entity.ToTable("eds_mechanics_type");

            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsOtherMuscleWorked>(entity =>
        {
            entity.ToTable("eds_other_muscle_worked");

            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsReasonForReschedule>(entity =>
        {
            entity.ToTable("eds_reason_for_reschedule");

            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsReasonForSkipping>(entity =>
        {
            entity.ToTable("eds_reason_for_skipping");

            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsSet>(entity =>
        {
            entity.ToTable("eds_set");

            entity.HasIndex(e => e.FkExerciseId, "IX_eds_set_fk_exercise_id");

            entity.Property(e => e.EndTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("end_time_stamp");
            entity.Property(e => e.FkExerciseId).HasColumnName("fk_exercise_id");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.IsCustomerAddedSet).HasColumnName("is_customer_added_set");
            entity.Property(e => e.IsSkipped).HasColumnName("is_skipped");
            entity.Property(e => e.SetSequenceNumber).HasColumnName("set_sequence_number");
            entity.Property(e => e.TimeOffset).HasColumnName("time_offset");

            entity.HasOne(d => d.FkExercise).WithMany(p => p.EdsSet)
                .HasForeignKey(d => d.FkExerciseId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_eds_set_eds_exercise");
        });

        modelBuilder.Entity<EdsSetDefaults>(entity =>
        {
            entity.ToTable("eds_set_defaults");

            entity.HasIndex(e => e.FkExerciseTypeId, "IX_eds_set_defaults_fk_exercise_type_id");

            entity.Property(e => e.FkExerciseTypeId).HasColumnName("fk_exercise_type_id");
            entity.Property(e => e.SetSequenceNumber).HasColumnName("set_sequence_number");

            entity.HasOne(d => d.FkExerciseType).WithMany(p => p.EdsSetDefaults)
                .HasForeignKey(d => d.FkExerciseTypeId)
                .HasConstraintName("FK_eds_set_defaults_eds_exercise_type");
        });

        modelBuilder.Entity<EdsSetMetricTypes>(entity =>
        {
            entity.ToTable("eds_set_metric_types");

            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.IsDistance).HasColumnName("is_distance");
            entity.Property(e => e.IsRepetition).HasColumnName("is_repetition");
            entity.Property(e => e.IsResistance).HasColumnName("is_resistance");
            entity.Property(e => e.IsTime).HasColumnName("is_time");
            entity.Property(e => e.IsWeight).HasColumnName("is_weight");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsSetMetrics>(entity =>
        {
            entity.ToTable("eds_set_metrics");

            entity.HasIndex(e => e.FkSetId, "IX_eds_set_metrics_fk_set_id");

            entity.Property(e => e.ActualCustomMetric).HasColumnName("actual_custom_metric");
            entity.Property(e => e.FkMetricsTypeId).HasColumnName("fk_metrics_type_id");
            entity.Property(e => e.FkSetId).HasColumnName("fk_set_id");
            entity.Property(e => e.TargetCustomMetric).HasColumnName("target_custom_metric");

            entity.HasOne(d => d.FkMetricsType).WithMany(p => p.EdsSetMetrics)
                .HasForeignKey(d => d.FkMetricsTypeId)
                .HasConstraintName("FK_eds_set_metrics_eds_set_metric_types");

            entity.HasOne(d => d.FkSet).WithMany(p => p.EdsSetMetrics)
                .HasForeignKey(d => d.FkSetId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_eds_set_metrics_eds_set");
        });

        modelBuilder.Entity<EdsSetMetricsDefault>(entity =>
        {
            entity.ToTable("eds_set_metrics_default");

            entity.HasIndex(e => e.FkSetDefaultsId, "IX_eds_set_metrics_default_fk_set_defaults_id");

            entity.HasIndex(e => e.FkSetMetricTypeId, "IX_eds_set_metrics_default_fk_set_metric_type_id");

            entity.Property(e => e.DefaultCustomMetric).HasColumnName("default_custom_metric");
            entity.Property(e => e.FkSetDefaultsId).HasColumnName("fk_set_defaults_id");
            entity.Property(e => e.FkSetMetricTypeId).HasColumnName("fk_set_metric_type_id");

            entity.HasOne(d => d.FkSetDefaults).WithMany(p => p.EdsSetMetricsDefault)
                .HasForeignKey(d => d.FkSetDefaultsId)
                .HasConstraintName("FK_eds_set_metrics_default_eds_set_defaults");

            entity.HasOne(d => d.FkSetMetricType).WithMany(p => p.EdsSetMetricsDefault)
                .HasForeignKey(d => d.FkSetMetricTypeId)
                .HasConstraintName("FK_eds_set_metrics_default_eds_set_metric_types");
        });

        modelBuilder.Entity<EdsSport>(entity =>
        {
            entity.ToTable("eds_sport");

            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<EdsTrainingSession>(entity =>
        {
            entity.ToTable("eds_training_session");

            entity.HasIndex(e => e.FkEdsDailyPlan, "IX_eds_training_session_fk_eds_daily_plan");

            entity.Property(e => e.CustomerFedback)
                .HasMaxLength(512)
                .HasColumnName("customer_fedback");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasColumnName("description");
            entity.Property(e => e.EndDateTime)
                .HasColumnType("datetime")
                .HasColumnName("end_date_time");
            entity.Property(e => e.EndTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("end_time_stamp");
            entity.Property(e => e.ExerciseDuration).HasColumnName("exercise_duration");
            entity.Property(e => e.FkEdsDailyPlan).HasColumnName("fk_eds_daily_plan");
            entity.Property(e => e.IsCustomerAddedTrainingSession).HasColumnName("is_customer_added_training_session");
            entity.Property(e => e.IsMoved).HasColumnName("is_moved");
            entity.Property(e => e.IsSkipped).HasColumnName("is_skipped");
            entity.Property(e => e.IsTemplate).HasColumnName("is_template");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("name");
            entity.Property(e => e.ReadonForSkipping).HasColumnName("readon_for_skipping");
            entity.Property(e => e.ReasonForReschedule).HasColumnName("reason_for_reschedule");
            entity.Property(e => e.StartDateTime)
                .HasColumnType("datetime")
                .HasColumnName("start_date_time");
            entity.Property(e => e.StartTimestamp).HasColumnName("start_timestamp");
            entity.Property(e => e.TimeOffset).HasColumnName("time_offset");

            entity.HasOne(d => d.FkEdsDailyPlanNavigation).WithMany(p => p.EdsTrainingSession)
                .HasForeignKey(d => d.FkEdsDailyPlan)
                .HasConstraintName("FK_eds_training_session_eds_daily_plan");

            entity.HasOne(d => d.ReadonForSkippingNavigation).WithMany(p => p.EdsTrainingSession)
                .HasForeignKey(d => d.ReadonForSkipping)
                .HasConstraintName("FK_eds_training_session_eds_reason_for_skipping");

            entity.HasOne(d => d.ReasonForRescheduleNavigation).WithMany(p => p.EdsTrainingSession)
                .HasForeignKey(d => d.ReasonForReschedule)
                .HasConstraintName("FK_eds_training_session_eds_reason_for_reschedule");
        });

        modelBuilder.Entity<EdsWeeklyPlan>(entity =>
        {
            entity.ToTable("eds_weekly_plan");

            entity.HasIndex(e => e.FkEds12weekPlan, "IX_eds_weekly_plan_fk_eds_12week_plan");

            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.FkEds12weekPlan).HasColumnName("fk_eds_12week_plan");
            entity.Property(e => e.IsTemplate).HasColumnName("is_template");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");

            entity.HasOne(d => d.FkEds12weekPlanNavigation).WithMany(p => p.EdsWeeklyPlan)
                .HasForeignKey(d => d.FkEds12weekPlan)
                .HasConstraintName("FK_eds_weekly_plan_eds_12week_plan");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.ApiKey).HasColumnName("api_key");
            entity.Property(e => e.BarcodeString)
                .HasMaxLength(50)
                .HasColumnName("barcode_string");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.Dob)
                .HasColumnType("date")
                .HasColumnName("dob");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .HasColumnName("first_name");
            entity.Property(e => e.FkFederatedUser)
                .IsRequired()
                .HasMaxLength(450)
                .HasColumnName("fk_federated_user");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("gender");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("((1))")
                .HasColumnName("is_Active");
            entity.Property(e => e.IsNewBarcode).HasColumnName("is_new_barcode");
            entity.Property(e => e.LastKnownTimeOffset).HasColumnName("last_known_time_offset");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .HasColumnName("last_name");
            entity.Property(e => e.Mobile)
                .HasMaxLength(50)
                .HasColumnName("mobile");
            entity.Property(e => e.SetTimeOffset).HasColumnName("set_time_offset");
            entity.Property(e => e.UserLevel).HasColumnName("user_level");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}