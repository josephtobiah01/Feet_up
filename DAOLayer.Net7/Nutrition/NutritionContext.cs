// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DAOLayer.Net7.Nutrition;

public partial class NutritionContext : DbContext
{
    public NutritionContext()
    {
    }

    public NutritionContext(DbContextOptions<NutritionContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<FmsDishType> FmsDishType { get; set; }

    public virtual DbSet<FnsErrorCode> FnsErrorCode { get; set; }

    public virtual DbSet<FnsMealType> FnsMealType { get; set; }

    public virtual DbSet<FnsNutritionActualDay> FnsNutritionActualDay { get; set; }

    public virtual DbSet<FnsNutritionActualDish> FnsNutritionActualDish { get; set; }

    public virtual DbSet<FnsNutritionActualMeal> FnsNutritionActualMeal { get; set; }

    public virtual DbSet<FnsTranscriptionType> FnsTranscriptionType { get; set; }

    public virtual DbSet<User> User { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Country>(entity =>
        {
            entity.ToTable("country");

            entity.Property(e => e.AreaCode).HasColumnName("area_code");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.TimeOffset).HasColumnName("time_offset");
        });

        modelBuilder.Entity<FmsDishType>(entity =>
        {
            entity.ToTable("fms_dish_type");

            entity.Property(e => e.HasTarget).HasColumnName("has_target");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<FnsErrorCode>(entity =>
        {
            entity.ToTable("fns_error_code");

            entity.Property(e => e.DefaultErrorHeadline)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("default_error_headline");
            entity.Property(e => e.DefaultErrorMessage)
                .IsRequired()
                .HasMaxLength(512)
                .HasColumnName("default_error_message");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.ShortId)
                .HasMaxLength(50)
                .HasColumnName("short_id");
        });

        modelBuilder.Entity<FnsMealType>(entity =>
        {
            entity.ToTable("fns_meal_type");

            entity.Property(e => e.HasTarget).HasColumnName("has_target");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<FnsNutritionActualDay>(entity =>
        {
            entity.ToTable("fns_nutrition_actual_day");

            entity.Property(e => e.AlcoholGramsTarget).HasColumnName("alcohol_grams_target");
            entity.Property(e => e.CrabsGramsTarget).HasColumnName("crabs_grams_target");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.DayCalorieTarget).HasColumnName("day_calorie_target");
            entity.Property(e => e.DayCalorieTargetMax).HasColumnName("day_calorie_target_max");
            entity.Property(e => e.DayCalorieTargetMin).HasColumnName("day_calorie_target_min");
            entity.Property(e => e.FatGramsTarget).HasColumnName("fat_grams_target");
            entity.Property(e => e.FiberGramsTarget).HasColumnName("fiber_grams_target");
            entity.Property(e => e.FkUserId).HasColumnName("fk_user_id");
            entity.Property(e => e.ProteinGramsTarget).HasColumnName("protein_grams_target");
            entity.Property(e => e.SaturatedFatGramsTarget).HasColumnName("saturated_fat_grams_target");
            entity.Property(e => e.SugarGramsTarget).HasColumnName("sugar_grams_target");
            entity.Property(e => e.UnsaturatedFatGramsTarget).HasColumnName("unsaturated_fat_grams_target");

            entity.HasOne(d => d.FkUser).WithMany(p => p.FnsNutritionActualDay)
                .HasForeignKey(d => d.FkUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fns_nutrition_actual_day_User");
        });

        modelBuilder.Entity<FnsNutritionActualDish>(entity =>
        {
            entity.ToTable("fns_nutrition_actual_dish");

            entity.Property(e => e.AlcoholGramsActual).HasColumnName("alcohol_grams_actual");
            entity.Property(e => e.CalorieActual).HasColumnName("calorie_actual");
            entity.Property(e => e.CompletionTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("completion_timestamp");
            entity.Property(e => e.CrabsActual).HasColumnName("crabs_actual");
            entity.Property(e => e.CreationTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("creation_timestamp");
            entity.Property(e => e.ErrorTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("error_timestamp");
            entity.Property(e => e.FatActual).HasColumnName("fat_actual");
            entity.Property(e => e.FiberGramsActual).HasColumnName("fiber_grams_actual");
            entity.Property(e => e.FkDishTranscriptionTypeId).HasColumnName("fk_dish_transcription_type_id");
            entity.Property(e => e.FkDishTypeId).HasColumnName("fk_dish_type_id");
            entity.Property(e => e.FkErrorCodeId).HasColumnName("fk_error_code_id");
            entity.Property(e => e.FkNutritionActualMealId).HasColumnName("fk_nutrition_actual_meal_id");
            entity.Property(e => e.FkReuseReferenceId).HasColumnName("fk_reuse_reference_id");
            entity.Property(e => e.FkTranscriberId).HasColumnName("fk_transcriber_id");
            entity.Property(e => e.FkUserId).HasColumnName("fk_user_id");
            entity.Property(e => e.FkUserRecipeId).HasColumnName("fk_user_recipe_id");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.IsError).HasColumnName("is_error");
            entity.Property(e => e.IsFavorite).HasColumnName("is_favorite");
            entity.Property(e => e.IsFrequent).HasColumnName("is_frequent");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.NumberOfServingsConsumed).HasColumnName("number_of_servings_consumed");
            entity.Property(e => e.ProteinActual).HasColumnName("protein_actual");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1024)
                .HasColumnName("remarks");
            entity.Property(e => e.SaturatedFatGramsActual).HasColumnName("saturated_fat_grams_actual");
            entity.Property(e => e.ShareOfDishConsumed).HasColumnName("share_of_dish_consumed");
            entity.Property(e => e.SugarActual).HasColumnName("sugar_actual");
            entity.Property(e => e.TranscriberRemarks)
                .HasMaxLength(2048)
                .HasColumnName("transcriber_remarks");
            entity.Property(e => e.UnsaturatedFatActual).HasColumnName("unsaturated_fat_actual");
            entity.Property(e => e.UploadPhotoReference)
                .HasMaxLength(255)
                .HasColumnName("upload_photo_reference");

            entity.HasOne(d => d.FkDishTranscriptionType).WithMany(p => p.FnsNutritionActualDish)
                .HasForeignKey(d => d.FkDishTranscriptionTypeId)
                .HasConstraintName("FK_fns_nutrition_actual_dish_fns_nutrition_actual_meal");

            entity.HasOne(d => d.FkDishType).WithMany(p => p.FnsNutritionActualDish)
                .HasForeignKey(d => d.FkDishTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fns_nutrition_actual_dish_fms_dish_type");

            entity.HasOne(d => d.FkErrorCode).WithMany(p => p.FnsNutritionActualDish)
                .HasForeignKey(d => d.FkErrorCodeId)
                .HasConstraintName("FK_fns_nutrition_actual_dish_fns_error_code");

            entity.HasOne(d => d.FkNutritionActualMeal).WithMany(p => p.FnsNutritionActualDish)
                .HasForeignKey(d => d.FkNutritionActualMealId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fns_nutrition_actual_dish_fns_nutrition_actual_meal1");

            entity.HasOne(d => d.FkReuseReference).WithMany(p => p.InverseFkReuseReference)
                .HasForeignKey(d => d.FkReuseReferenceId)
                .HasConstraintName("FK_fns_nutrition_actual_dish_fns_nutrition_actual_dish");

            entity.HasOne(d => d.FkTranscriber).WithMany(p => p.FnsNutritionActualDishFkTranscriber)
                .HasForeignKey(d => d.FkTranscriberId)
                .HasConstraintName("FK_fns_nutrition_actual_dish_User");

            entity.HasOne(d => d.FkUser).WithMany(p => p.FnsNutritionActualDishFkUser)
                .HasForeignKey(d => d.FkUserId)
                .HasConstraintName("FK_fns_nutrition_actual_dish_User1");
        });

        modelBuilder.Entity<FnsNutritionActualMeal>(entity =>
        {
            entity.ToTable("fns_nutrition_actual_meal");

            entity.Property(e => e.AlcoholGramsTarget).HasColumnName("alcohol_grams_target");
            entity.Property(e => e.CrabsGramsTarget).HasColumnName("crabs_grams_target");
            entity.Property(e => e.FatGramsTarget).HasColumnName("fat_grams_target");
            entity.Property(e => e.FiberGramsTarget).HasColumnName("fiber_grams_target");
            entity.Property(e => e.FkNutritionActualDayId).HasColumnName("fk_nutrition_actual_day_id");
            entity.Property(e => e.HasTarget).HasColumnName("has_target");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.IsOngoing).HasColumnName("is_ongoing");
            entity.Property(e => e.IsSkipped).HasColumnName("is_skipped");
            entity.Property(e => e.IsSnoozed).HasColumnName("is_snoozed");
            entity.Property(e => e.MealCalorieMax).HasColumnName("meal_calorie_max");
            entity.Property(e => e.MealCalorieMin).HasColumnName("meal_calorie_min");
            entity.Property(e => e.MealCalorieTarget).HasColumnName("meal_calorie_target");
            entity.Property(e => e.MealTypeId).HasColumnName("meal_type_id");
            entity.Property(e => e.ProteinGramsTarget).HasColumnName("protein_grams_target");
            entity.Property(e => e.SaturatedFatGramsTarget).HasColumnName("saturated_fat_grams_target");
            entity.Property(e => e.SnoozedTime)
                .HasColumnType("datetime")
                .HasColumnName("snoozed_time");
            entity.Property(e => e.SugarGramsTarget).HasColumnName("sugar_grams_target");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.UnsaturatedFatGramsTarget).HasColumnName("unsaturated_fat_grams_target");

            entity.HasOne(d => d.FkNutritionActualDay).WithMany(p => p.FnsNutritionActualMeal)
                .HasForeignKey(d => d.FkNutritionActualDayId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fns_nutrition_actual_meal_fns_nutrition_actual_day");

            entity.HasOne(d => d.MealType).WithMany(p => p.FnsNutritionActualMeal)
                .HasForeignKey(d => d.MealTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fns_nutrition_actual_meal_fns_meal_type");
        });

        modelBuilder.Entity<FnsTranscriptionType>(entity =>
        {
            entity.ToTable("fns_transcription_type");

            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.ShortId)
                .HasMaxLength(50)
                .HasColumnName("short_id");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.ApiKey).HasColumnName("api_key");
            entity.Property(e => e.BarcodeString)
                .HasMaxLength(50)
                .HasColumnName("barcode_string");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.Dob)
                .HasColumnType("date")
                .HasColumnName("dob");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .HasColumnName("first_name");
            entity.Property(e => e.FkFederatedUser)
                .IsRequired()
                .HasMaxLength(450)
                .HasColumnName("fk_federated_user");
            entity.Property(e => e.FkInternalNotesId).HasColumnName("fk_internal_notes_id");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("gender");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("((1))")
                .HasColumnName("is_Active");
            entity.Property(e => e.IsNewBarcode).HasColumnName("is_new_barcode");
            entity.Property(e => e.LastKnownTimeOffset).HasColumnName("last_known_time_offset");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .HasColumnName("last_name");
            entity.Property(e => e.Mobile)
                .HasMaxLength(50)
                .HasColumnName("mobile");
            entity.Property(e => e.SetTimeOffset).HasColumnName("set_time_offset");
            entity.Property(e => e.UserLevel).HasColumnName("user_level");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}